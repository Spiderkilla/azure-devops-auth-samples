using System;
using System.Configuration;
using System.Globalization;
using Microsoft.Identity.Client;
using Microsoft.VisualStudio.Services.Client;
using Microsoft.VisualStudio.Services.DelegatedAuthorization;
using Microsoft.VisualStudio.Services.WebApi;

namespace NonInteractivePatGenerationSample
{
    public class Program
    {
        //
        // The Client ID is used by the application to uniquely identify itself to Azure AD.
        // The Tenant is the name or Id of the Azure AD tenant in which this application is registered.
        // The AAD Instance is the instance of Azure, for example public Azure or Azure China.
        // The Authority is the sign-in URL of the tenant.
        //
        internal static string aadInstance = ConfigurationManager.AppSettings["ida:AADInstance"];
        internal static string tenant = ConfigurationManager.AppSettings["ida:Tenant"];
        internal static string clientId =  ConfigurationManager.AppSettings["ida:ClientId"];
        internal static string authority = String.Format(CultureInfo.InvariantCulture, aadInstance, tenant);

        //URL of your Azure DevOps account.
        internal static string azureDevOpsOrganizationUrl = ConfigurationManager.AppSettings["ado:OrganizationUrl"];
        internal static string username = ConfigurationManager.AppSettings["aad:Username"];
        internal static string password = ConfigurationManager.AppSettings["aad:Password"];

        internal static string[] scopes = new string[] { "499b84ac-1321-427f-aa17-267ca6975798/user_impersonation" }; //Constant value to target Azure DevOps. Do not change  

        public static void Main(string[] args)
        {
            // MSAL Public client app
            var application = PublicClientApplicationBuilder.Create(clientId)
                                       .WithAuthority(authority)
                                       .WithDefaultRedirectUri()
                                       .Build();
            var result = application.AcquireTokenByUsernamePassword(scopes, username, password).ExecuteAsync().Result;

            var token = new VssAadToken(result.TokenType, result.AccessToken);
            var vstsCredential = new VssAadCredential(token);

            var connection = new VssConnection(new Uri(azureDevOpsOrganizationUrl), vstsCredential);
            var client = connection.GetClient<Microsoft.VisualStudio.Services.DelegatedAuthorization.WebApi.TokenHttpClient>();

            var sessionToken = new SessionToken
            {
                DisplayName = "Generated by sample code",
                Scope = "vso.work"
            };

            var pat = client.CreateSessionTokenAsync(
                sessionToken,
                tokenType: SessionTokenType.Compact,
                isPublic: false
                ).Result;

            Console.WriteLine(pat.Token);
        }
    }
}
